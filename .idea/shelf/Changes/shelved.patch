Index: Worker.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import os\n\nfrom PyQt6 import QtCore\nfrom PyQt6.QtWidgets import QApplication\n\nfrom find_bird_util import make_new_dir, log_message, detect_and_draw_birds, get_model, move_originals\n\n\nclass Worker(QtCore.QThread):\n    updateProgress = QtCore.pyqtSignal(int)\n    finishedProcessing = QtCore.pyqtSignal()  # Signal to indicate completion\n\n\n    def __init__(self, dir_pth, parent=None):\n        super(Worker, self).__init__(parent)\n        self.dir_pth = dir_pth\n        self.processed_files = set()\n\n    def run(self):\n        processed_files = set()\n        output_dir = make_new_dir(self.dir_pth, \"Boxed\")\n        super_picky_dir = make_new_dir(self.dir_pth, \"Super_Picky\")\n        bird_detected_dir = make_new_dir(self.dir_pth, \"Contains_Birds\")\n        no_birds_dir = make_new_dir(self.dir_pth, \"No_Birds\")\n\n        resized_dir = os.path.join(self.dir_pth, \"Resized\")\n        if not os.path.exists(resized_dir):\n            log_message(\"ERROR: 'Resized' folder not found.\", self.dir_pth)\n            return None\n\n        files = os.listdir(resized_dir)\n        total_files = len(files)\n\n        for i, filename in enumerate(files):\n            log_message(f\"Attempting to process {filename}\", self.dir_pth)\n            if filename in processed_files:\n                log_message(f\"Skipping {filename}, already processed\", self.dir_pth)\n                continue\n            self.processed_files.add(filename)\n            # Emit the progress update signal\n            self.updateProgress.emit(int((i / total_files) * 100))\n\n            log_message(\"=\" * 30, self.dir_pth)\n            log_message(f\"Processing file: {filename}\", self.dir_pth)\n            file_prefix, file_ext = os.path.splitext(filename)\n\n            filepath = os.path.join(resized_dir, filename)\n            output_pth = os.path.join(output_dir, filename)\n\n            if not os.path.exists(filepath):\n                log_message(f\"ERROR: attempting to process file that does not exist {filename}\", self.dir_pth)\n                continue\n\n            # runs model and draws a box on the resized image\n            result = detect_and_draw_birds(filepath, get_model(), output_pth)\n            if result is None:\n                log_message(f\"ERROR: Input file [{filepath}] not an image of jpg format\", self.dir_pth)\n                continue\n            detected, dominant, centered, sharp = result[0], result[1], result[2], result[3]\n\n            log_message(f\"RESULTS: [detected = {detected}, dominant = {dominant}, centered = {centered},\"\n                        f\" sharp = {sharp}]\", self.dir_pth)\n\n            save_to_pth = self.dir_pth\n            if detected:\n                if dominant and sharp:\n                    save_to_pth = super_picky_dir\n                else:\n                    save_to_pth = bird_detected_dir\n            else:\n                save_to_pth = no_birds_dir\n\n            move_originals(file_prefix, self.dir_pth, save_to_pth)\n            files.remove(filename)\n\n\n        # Emit the progress update signal\n        self.updateProgress.emit(100)\n\n        log_message(f\"Process Completed, files processed: {total_files}\", self.dir_pth)\n        self.finishedProcessing.emit()  # Emit signal indicating completion
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Worker.py b/Worker.py
--- a/Worker.py	(revision 2255e38c2fbba87c7e08a306cdae61dbcf693d97)
+++ b/Worker.py	(date 1703332362385)
@@ -1,7 +1,6 @@
 import os
 
 from PyQt6 import QtCore
-from PyQt6.QtWidgets import QApplication
 
 from find_bird_util import make_new_dir, log_message, detect_and_draw_birds, get_model, move_originals
 
@@ -9,19 +8,32 @@
 class Worker(QtCore.QThread):
     updateProgress = QtCore.pyqtSignal(int)
     finishedProcessing = QtCore.pyqtSignal()  # Signal to indicate completion
+<<<<<<< HEAD
 
+=======
+>>>>>>> origin/master
 
-    def __init__(self, dir_pth, parent=None):
+    def __init__(self, dir_pth, processed_files, ui_settings, parent=None):
         super(Worker, self).__init__(parent)
         self.dir_pth = dir_pth
+<<<<<<< HEAD
         self.processed_files = set()
 
     def run(self):
+=======
+        self.processed_files = processed_files
+        self.ui_settings = ui_settings
+
+    def run(self):
+
+
+>>>>>>> origin/master
         processed_files = set()
         output_dir = make_new_dir(self.dir_pth, "Boxed")
         super_picky_dir = make_new_dir(self.dir_pth, "Super_Picky")
         bird_detected_dir = make_new_dir(self.dir_pth, "Contains_Birds")
         no_birds_dir = make_new_dir(self.dir_pth, "No_Birds")
+        process_bar = 0
 
         resized_dir = os.path.join(self.dir_pth, "Resized")
         if not os.path.exists(resized_dir):
@@ -36,14 +48,26 @@
             if filename in processed_files:
                 log_message(f"Skipping {filename}, already processed", self.dir_pth)
                 continue
+<<<<<<< HEAD
             self.processed_files.add(filename)
             # Emit the progress update signal
             self.updateProgress.emit(int((i / total_files) * 100))
+=======
+            if i < process_bar:
+                log_message(f"Skipping {filename} due to i: {i} being less than bar{process_bar}", self.dir_pth)
+                continue
+>>>>>>> origin/master
 
-            log_message("=" * 30, self.dir_pth)
+            process_bar += 1
+            self.processed_files.add(filename)
+            # Emit the progress update signal
+            self.updateProgress.emit(int((process_bar / total_files) * 100))
+
+            log_message("=" * 50, self.dir_pth)
             log_message(f"Processing file: {filename}", self.dir_pth)
             file_prefix, file_ext = os.path.splitext(filename)
 
+
             filepath = os.path.join(resized_dir, filename)
             output_pth = os.path.join(output_dir, filename)
 
@@ -51,8 +75,13 @@
                 log_message(f"ERROR: attempting to process file that does not exist {filename}", self.dir_pth)
                 continue
 
+<<<<<<< HEAD
             # runs model and draws a box on the resized image
             result = detect_and_draw_birds(filepath, get_model(), output_pth)
+=======
+                # runs model and draws a box on the resized image
+            result = detect_and_draw_birds(filepath, get_model(), output_pth, self.ui_settings)
+>>>>>>> origin/master
             if result is None:
                 log_message(f"ERROR: Input file [{filepath}] not an image of jpg format", self.dir_pth)
                 continue
@@ -66,7 +95,7 @@
                 if dominant and sharp:
                     save_to_pth = super_picky_dir
                 else:
-                    save_to_pth = bird_detected_dir
+                        save_to_pth = bird_detected_dir
             else:
                 save_to_pth = no_birds_dir
 
@@ -74,8 +103,17 @@
             files.remove(filename)
 
 
+<<<<<<< HEAD
         # Emit the progress update signal
+        self.updateProgress.emit(100)
+
+        log_message(f"Process Completed, files processed: {total_files}", self.dir_pth)
+        self.finishedProcessing.emit()  # Emit signal indicating completion
+=======
+            # Emit the progress update signal
         self.updateProgress.emit(100)
 
         log_message(f"Process Completed, files processed: {total_files}", self.dir_pth)
-        self.finishedProcessing.emit()  # Emit signal indicating completion
\ No newline at end of file
+        self.finishedProcessing.emit()  # Emit signal indicating completion
+
+>>>>>>> origin/master
Index: .idea/SuperPickyV0.02.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<module type=\"PYTHON_MODULE\" version=\"4\">\n  <component name=\"NewModuleRootManager\">\n    <content url=\"file://$MODULE_DIR$\">\n      <excludeFolder url=\"file://$MODULE_DIR$/.venv\" />\n    </content>\n    <orderEntry type=\"inheritedJdk\" />\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\n  </component>\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/SuperPickyV0.02.iml b/.idea/SuperPickyV0.02.iml
--- a/.idea/SuperPickyV0.02.iml	(revision 2255e38c2fbba87c7e08a306cdae61dbcf693d97)
+++ b/.idea/SuperPickyV0.02.iml	(date 1703332362384)
@@ -3,8 +3,9 @@
   <component name="NewModuleRootManager">
     <content url="file://$MODULE_DIR$">
       <excludeFolder url="file://$MODULE_DIR$/.venv" />
+      <excludeFolder url="file://$MODULE_DIR$/venv" />
     </content>
-    <orderEntry type="inheritedJdk" />
+    <orderEntry type="jdk" jdkName="Python 3.9 (SuperPicky)" jdkType="Python SDK" />
     <orderEntry type="sourceFolder" forTests="false" />
   </component>
 </module>
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"99079077-4f83-4989-aac1-ff983475948d\" name=\"Changes\" comment=\"stashed\">\n      <change afterPath=\"$PROJECT_DIR$/.gitignore\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_23_12_2023,_12_02 pm_[Changes]/shelved.patch\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_23_12_2023,_12_02 pm_[Changes]/shelved.patch\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_23_12_2023__12_02pm__Changes_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_23_12_2023__12_02pm__Changes_.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/SuperPicky.spec\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/SuperPicky.spec\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\n  </component>\n  <component name=\"TaskManager\">\n    <task id=\"LOCAL-00001\" summary=\"stashed\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1703302435857</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1703302435857</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"2\" />\n    <servers />\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"stashed\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"stashed\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 2255e38c2fbba87c7e08a306cdae61dbcf693d97)
+++ b/.idea/workspace.xml	(date 1703332362385)
@@ -1,15 +1,30 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
+  <component name="AnalysisUIOptions">
+    <option name="ANALYZE_INJECTED_CODE" value="false" />
+  </component>
   <component name="AutoImportSettings">
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
+<<<<<<< HEAD
     <list default="true" id="99079077-4f83-4989-aac1-ff983475948d" name="Changes" comment="stashed">
       <change afterPath="$PROJECT_DIR$/.gitignore" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_23_12_2023,_12_02 pm_[Changes]/shelved.patch" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_23_12_2023,_12_02 pm_[Changes]/shelved.patch" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_23_12_2023__12_02pm__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_23_12_2023__12_02pm__Changes_.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/SuperPicky.spec" beforeDir="false" afterPath="$PROJECT_DIR$/SuperPicky.spec" afterDir="false" />
+=======
+    <list default="true" id="620992e9-a1fe-4912-911a-e1e6e312c7a0" name="Changes" comment="增加了 内容修改记录">
+      <change beforePath="$PROJECT_DIR$/.idea/SuperPickyV0.02.iml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/SuperPickyV0.02.iml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/MainWindow.py" beforeDir="false" afterPath="$PROJECT_DIR$/MainWindow.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/README - dev problems" beforeDir="false" afterPath="$PROJECT_DIR$/README - dev problems" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Worker.py" beforeDir="false" afterPath="$PROJECT_DIR$/Worker.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/find_bird_util.py" beforeDir="false" afterPath="$PROJECT_DIR$/find_bird_util.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/main_ui.py" beforeDir="false" afterPath="$PROJECT_DIR$/main_ui.py" afterDir="false" />
+>>>>>>> origin/master
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -22,6 +37,61 @@
   <component name="ProjectLevelVcsManager" settingsEditedManually="true">
     <ConfirmationsSetting value="2" id="Add" />
   </component>
+<<<<<<< HEAD
+=======
+  <component name="ProjectViewState">
+    <option name="hideEmptyMiddlePackages" value="true" />
+    <option name="showLibraryContents" value="true" />
+  </component>
+  <component name="PropertiesComponent"><![CDATA[{
+  "keyToString": {
+    "ASKED_ADD_EXTERNAL_FILES": "true",
+    "Python.main.executor": "Run",
+    "RunOnceActivity.OpenProjectViewOnStart": "true",
+    "RunOnceActivity.ShowReadmeOnStart": "true",
+    "git-widget-placeholder": "master",
+    "run.code.analysis.last.selected.profile": "aDefault",
+    "settings.editor.selected.configurable": "com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable"
+  }
+}]]></component>
+  <component name="RecentsManager">
+    <key name="MoveFile.RECENT_KEYS">
+      <recent name="$PROJECT_DIR$" />
+    </key>
+  </component>
+  <component name="RunManager">
+    <configuration name="main" type="PythonConfigurationType" factoryName="Python" nameIsGenerated="true">
+      <module name="SuperPickyV0.02" />
+      <option name="ENV_FILES" value="" />
+      <option name="INTERPRETER_OPTIONS" value="" />
+      <option name="PARENT_ENVS" value="true" />
+      <envs>
+        <env name="PYTHONUNBUFFERED" value="1" />
+      </envs>
+      <option name="SDK_HOME" value="" />
+      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
+      <option name="IS_MODULE_SDK" value="true" />
+      <option name="ADD_CONTENT_ROOTS" value="true" />
+      <option name="ADD_SOURCE_ROOTS" value="true" />
+      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/main.py" />
+      <option name="PARAMETERS" value="" />
+      <option name="SHOW_COMMAND_LINE" value="false" />
+      <option name="EMULATE_TERMINAL" value="false" />
+      <option name="MODULE_MODE" value="false" />
+      <option name="REDIRECT_INPUT" value="false" />
+      <option name="INPUT_FILE" value="" />
+      <method v="2" />
+    </configuration>
+  </component>
+  <component name="SharedIndexes">
+    <attachedChunks>
+      <set>
+        <option value="bundled-python-sdk-50da183f06c8-d3b881c8e49f-com.jetbrains.pycharm.community.sharedIndexes.bundled-PC-233.13135.95" />
+      </set>
+    </attachedChunks>
+  </component>
+  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
+>>>>>>> origin/master
   <component name="TaskManager">
     <task id="LOCAL-00001" summary="stashed">
       <option name="closed" value="true" />
@@ -31,11 +101,29 @@
       <option name="project" value="LOCAL" />
       <updated>1703302435857</updated>
     </task>
+<<<<<<< HEAD
+=======
+    <task id="LOCAL-00001" summary="增加了 内容修改记录">
+      <option name="closed" value="true" />
+      <created>1703295034449</created>
+      <option name="number" value="00001" />
+      <option name="presentableId" value="LOCAL-00001" />
+      <option name="project" value="LOCAL" />
+      <updated>1703295034449</updated>
+    </task>
+>>>>>>> origin/master
     <option name="localTasksCounter" value="2" />
     <servers />
   </component>
   <component name="VcsManagerConfiguration">
+<<<<<<< HEAD
     <MESSAGE value="stashed" />
     <option name="LAST_COMMIT_MESSAGE" value="stashed" />
+=======
+    <option name="ADD_EXTERNAL_FILES_SILENTLY" value="true" />
+    <MESSAGE value="merged frontend onto main" />
+    <MESSAGE value="增加了 内容修改记录" />
+    <option name="LAST_COMMIT_MESSAGE" value="增加了 内容修改记录" />
+>>>>>>> origin/master
   </component>
 </project>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"Black\">\n    <option name=\"sdkName\" value=\"Python 3.9 (SuperPickyV0.02)\" />\n  </component>\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.9 (SuperPickyV0.02)\" project-jdk-type=\"Python SDK\" />\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 2255e38c2fbba87c7e08a306cdae61dbcf693d97)
+++ b/.idea/misc.xml	(date 1703332362384)
@@ -3,5 +3,5 @@
   <component name="Black">
     <option name="sdkName" value="Python 3.9 (SuperPickyV0.02)" />
   </component>
-  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.9 (SuperPickyV0.02)" project-jdk-type="Python SDK" />
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.9 (SuperPicky)" project-jdk-type="Python SDK" />
 </project>
\ No newline at end of file
Index: find_bird_util.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import os\n\nfrom PIL import Image, ImageDraw, ImageFont\nimport rawpy\nimport textwrap\n\nimport torchvision.transforms as T\nfrom PyQt6.QtWidgets import QApplication\nfrom torchvision.models.detection import fasterrcnn_resnet50_fpn\nfrom torchvision.models.detection.faster_rcnn import FasterRCNN_ResNet50_FPN_Weights\nimport torch\nimport numpy as np\nimport cv2\nimport shutil\n\n\n# 定义一个用于记录日志的函数\ndef log_message(message, dir):\n    log_file_path = os.path.join(dir, \"process_log.txt\")  # gets path to log file\n    log_file = open(log_file_path, \"a\")  # opens and allows writing\n    log_file.write(message + \"\\n\")  # writes message to log\n    log_file.close()  # closes log file\n    print(message)  # prints message in console\n\n\ndef write_text_on_existing_image(image_path, text, font_size=30, font_color=(255, 255, 255), max_width=1024):\n    \"\"\"\n    Write paragraph text on an existing image at the top left corner.\n\n    :param image_path: The path of the existing image.\n    :param text: The paragraph text to write.\n    :param font_size: The size of the font.\n    :param font_color: The color of the font (R, G, B).\n    :param max_width: The maximum width of the text area.\n    \"\"\"\n    # 加载现有图片\n    image = Image.open(image_path)\n\n    # 调整图片大小，如果图片的宽度超过max_width\n    if image.width > max_width:\n        height = int(max_width * image.height / image.width)\n        image = image.resize((max_width, height), Image.LANCZOS)\n\n    # 准备绘制文字\n    draw = ImageDraw.Draw(image)\n\n    # 使用默认字体\n    font_path = \"/System/Library/Fonts/Helvetica.ttc\"\n    font = ImageFont.truetype(font_path, font_size)\n\n    # 文本换行处理\n    wrapped_text = textwrap.fill(text, width=int(max_width / font_size * 2))\n\n    # 在图片左上角写文本\n    draw.text((10, 10), wrapped_text, font=font, fill=font_color)\n\n    # 保存修改后的图片，覆盖原文件\n    image.save(image_path)\n\n\n# checks and makes a new directory within directory_path and returns the path of the new dir\ndef make_new_dir(directory_path, new_dir_name):\n    # gets path for the new directory\n    new_dir_path = os.path.join(directory_path, new_dir_name)\n    log_message(f\"New directory path: {new_dir_path}\", directory_path)\n\n    # checks if directory already exists, make it if it does not\n    if not os.path.exists(new_dir_path):\n        os.makedirs(new_dir_path)\n\n    return new_dir_path\n\n\n# checks if the directory contains any raw files, makes sure that each raw file has a jpg counterpart\ndef directory_contains_raw(directory):\n    # lists all the possible extensions for raws and jpgs\n    raw_extensions = ['.nef', '.cr2', '.arw', '.raf', '.orf', '.rw2', '.pef', '.dng']\n    jpg_extensions = ['.jpg', '.jpeg']\n\n    # dictionaries to keep track of which files are raw and which aren't as well as their specific extension\n    raw_dict = {}\n    jpg_dict = {}\n\n    # loops through the names of every file in the directory\n    for filename in os.listdir(directory):\n\n        file_prefix, file_ext = os.path.splitext(filename)  # gets file name and the extensions and splits it\n\n        # adds files to their respective dictionaries based on their extension\n        if file_ext.lower() in raw_extensions:\n            raw_dict[file_prefix] = file_ext\n        if file_ext.lower() in jpg_extensions:\n            jpg_dict[file_prefix] = file_ext\n\n    #\n    for key, value in raw_dict.items():\n        if key in jpg_dict.keys():\n            log_message(f\"FILE: [{key}] has raw and jpg files\", directory)\n            jpg_dict.pop(key)\n            continue\n        else:\n            raw_to_jpeg(os.path.join(directory, key + value))\n            log_message(f\"FILE: [{key}] now has completed a conversion to jpg\", directory)\n\n    if len(jpg_dict.keys()) == 0:\n        return True\n\n    else:\n        unusable_files = make_new_dir(directory, \"Unusable Files\")\n\n        for key, value in jpg_dict.items():\n            move_originals(key, directory, unusable_files)\n\n    return False\n\n\ndef resize_image(image, max_length=1024):\n    # 计算缩放比例\n    width, height = image.size\n    scaling_factor = max_length / max(width, height)\n\n    # 如果需要缩放，进行缩放操作\n    if scaling_factor < 1:\n        new_width = int(width * scaling_factor)\n        new_height = int(height * scaling_factor)\n        return image.resize((new_width, new_height), Image.LANCZOS)\n    return image\n\n\ndef resize_folder(directory):\n    jpg_extensions = ['.jpg', '.jpeg']\n\n    # creates a folder called \"Resized\" within the given directory to store all the resized images\n    resized_path = make_new_dir(directory, \"Resized\")\n\n    for filename in os.listdir(directory):\n\n        log_message(\"=\" * 30, directory)\n        log_message(f\"Begin resizing process on FILE: [{filename}]\", directory)\n        file_path = os.path.join(directory, filename)\n        file_prefix, file_ext = os.path.splitext(filename)\n\n        # checks if its a jpg file\n        if file_ext.lower() in jpg_extensions:\n            log_message(f\"NOTE: file extension matches, resizing image\\n\", directory)\n            # 打开并保存缩放后的 JPEG 图像\n            with Image.open(file_path) as img:\n                resized_img = resize_image(img)\n                resized_jpeg_path = os.path.join(resized_path, filename)\n                resized_img.save(resized_jpeg_path)\n\n        QApplication.processEvents()\n\n\ndef raw_to_jpeg(raw_file_path):\n    filename = os.path.basename(raw_file_path)\n    file_prefix, file_ext = os.path.splitext(filename)\n\n    directory_path = raw_file_path[:-len(filename)]\n    jpg_file_path = os.path.join(directory_path, (file_prefix + \".jpg\"))\n\n    log_message(f\"CONVERSION: Filename is [{filename}]\", directory_path)\n\n    log_message(f\"CONVERSION: Destination file path is [{jpg_file_path}]\", directory_path)\n\n    if os.path.exists(jpg_file_path):\n        log_message(f\"ERROR, file [{filename}] already exists\", directory_path)\n        return False\n\n    # 异常处理，确保转换过程中的错误被捕获并记录\n    try:\n        with rawpy.imread(raw_file_path) as raw:\n            rgb = raw.postprocess(use_auto_wb=True)  # 使用自动白平衡\n            image = Image.fromarray(rgb)\n            image.save(jpg_file_path)\n\n            log_message(f\"CONVERSION: RAW 文件转换为 JPEG: {raw_file_path} -> {jpg_file_path}\", directory_path)\n    except Exception as e:\n        log_message(f\"ERROR: 转换 RAW 文件时出错: {raw_file_path}, 错误: {e}\", directory_path)\n\n\ndef calculate_sharpness(image):\n    gray = cv2.cvtColor(np.array(image), cv2.COLOR_RGB2GRAY)\n    laplacian = cv2.Laplacian(gray, cv2.CV_64F)\n    sharpness = np.var(laplacian)\n    return sharpness\n\n\n# 初始化 Faster R-CNN 模型\ndef get_model():\n    model = fasterrcnn_resnet50_fpn(weights=FasterRCNN_ResNet50_FPN_Weights.DEFAULT)\n    model.eval()\n    return model\n\n\n# 检测图片中的鸟类并绘制边界框\ndef detect_and_draw_birds(image_path, model, output_path, area_threshold=0.03, center_threshold=0.6):\n    bird_dominant = False\n    bird_detected = False\n    bird_sharp = False\n    bird_centred = False\n\n    if \".jpg\" not in image_path.lower() and \".jpeg\" not in image_path.lower():\n        return None\n\n    # 确保打开的是图像文件\n    with Image.open(image_path) as img:\n        # 对图像进行转换和预处理\n        transform = T.Compose([T.ToTensor()])\n        image_tensor = transform(img).unsqueeze(0)\n\n        image_width, image_height = img.size\n\n        sharpness = 0\n        area_ratio = 0.0\n        center_distance_x = 0.0\n        center_distance_y = 0.0\n\n        # 使用模型进行预测\n        with torch.no_grad():\n            prediction = model(image_tensor)\n\n        # 绘制检测到的鸟类的边界框\n        draw = ImageDraw.Draw(img)\n        for element in zip(prediction[0]['boxes'], prediction[0]['labels'], prediction[0]['scores']):\n            box, label, score = element\n\n            # checks if a bird has been detected and draws a box around it if true\n            if score >= 0.8 and label == 16:  # 假设 16 是鸟类的标签， 0.7 confidence threshold\n                draw.rectangle([(box[0], box[1]), (box[2], box[3])], outline=\"red\", width=3)\n                bird_detected = True\n\n                # checks if the bird is at the centre of the image\n                x1, y1, x2, y2 = box\n                box_area = (x2 - x1) * (y2 - y1)\n                image_area = image_width * image_height\n                area_ratio = box_area / image_area\n\n                center_x, center_y = (x1 + x2) / 2, (y1 + y2) / 2\n                center_distance_x = center_x / image_width\n                center_distance_y = center_y / image_height\n\n                if area_ratio >= area_threshold:\n                    bird_dominant = True\n\n                if center_distance_x <= center_threshold and center_distance_y <= center_threshold:\n                    bird_centred = True\n\n                # calculates sharpness\n                bird_region = img.crop((int(box[0]), int(box[1]), int(box[2]), int(box[3])))\n                sharpness = calculate_sharpness(bird_region)\n                if sharpness >= 800:\n                    bird_sharp = True\n\n                print(f\"Sharpness = {sharpness}\")\n\n        # 保存绘制了边界框的图片\n        if bird_detected:\n            img.save(output_path)\n            write_text_on_existing_image(output_path,\n                                         f\"Area ratio: {area_ratio * 100:.4f}, \\nCentre X {center_distance_x:.2f}, \"\n                                         f\"Centre Y{center_distance_y:.2f}, \\nSharpness: {sharpness:.2f}\")\n\n        return bird_detected, bird_dominant, bird_centred, bird_sharp\n\n\ndef get_originals(file_prefix, dir_pth):\n    og_files = []\n\n    for filename in os.listdir(dir_pth):\n        if file_prefix in filename:\n            og_files.append(filename)\n\n    return og_files\n\n\ndef move_originals(file_prefix, dir_pth, save_to_pth):\n    og_files = get_originals(file_prefix, dir_pth)\n\n    if len(og_files) < 1:\n        log_message(f\"ERROR, original files for {file_prefix} not found\", dir_pth)\n        return False\n\n    for file in og_files:\n        source_pth = os.path.join(dir_pth, file)\n\n        if os.path.exists(source_pth):\n            shutil.move(source_pth, os.path.join(save_to_pth, file))\n            log_message(f\"{source_pth} moved into {save_to_pth}\", dir_pth)\n        else:\n            log_message(f\"ERROR, file to be moved {source_pth} does not exist\", dir_pth)\n            return False\n    return True\n\nimport shutil\nimport os\n\ndef delete_directory(dir_path):\n    # Check if the directory exists\n    if os.path.exists(dir_path):\n\n        # Remove the directory and all its contents\n        shutil.rmtree(dir_path)\n        print(f\"CLEAN UP: The directory '{dir_path}' has been deleted.\")\n    else:\n        print(f\"ERROR in CLEAN UP: The directory '{dir_path}' does not exist.\")\n\n\n\"\"\"\ndef run_model_on_directory(dir_pth):\n    output_dir = make_new_dir(dir_pth, \"Boxed\")\n    super_picky_dir = make_new_dir(dir_pth, \"Super_Picky\")\n    bird_detected_dir = make_new_dir(dir_pth, \"Contains_Birds\")\n    no_birds_dir = make_new_dir(dir_pth, \"No_Birds\")\n\n    resized_dir = os.path.join(dir_pth, \"Resized\")\n    if not os.path.exists(resized_dir):\n        log_message(\"ERROR: 'Resized' folder not found.\", dir_pth)\n        return False\n\n    log_message(f\"Number of photos to be processed: {len(os.listdir(resized_dir))}\", dir_pth)\n    log_message(\"=\" * 30, dir_pth)\n    log_message(f\"Number of photos to be processed: {len(os.listdir(resized_dir))}\", dir_pth)\n\n    for filename in os.listdir(resized_dir):\n        log_message(\"=\" * 30, dir_pth)\n        log_message(f\"Processing file: {filename}\", dir_pth)\n        file_prefix, file_ext = os.path.splitext(filename)\n\n        filepath = os.path.join(resized_dir, filename)\n        output_pth = os.path.join(output_dir, filename)\n\n        # runs model and draws a box on the resized image\n        result = detect_and_draw_birds(filepath, get_model(), output_pth)\n        if result is None:\n            continue\n        detected, dominant, centered, sharp = result[0], result[1], result[2], result[3]\n\n        log_message(f\"RESULTS: [detected = {detected}, dominant = {dominant}, centered = {centered},\"\n                    f\" sharp = {sharp}]\", dir_pth)\n\n        save_to_pth = dir_pth\n        if detected:\n            if dominant and sharp:\n                save_to_pth = super_picky_dir\n            else:\n                save_to_pth = bird_detected_dir\n        else:\n            save_to_pth = no_birds_dir\n\n        move_originals(file_prefix, dir_pth, save_to_pth)\n        QApplication.processEvents()\n\n        log_message(f\"Process Completed, files processed: {len(os.listdir(resized_dir))}\", dir_pth)\n\n    return True\"\"\"\n\n\ndef run_super_picky(directory):\n    if not directory_contains_raw(directory):\n        log_message(f\"ERROR: {directory} does not contain any raw files\", directory)\n\n    resize_folder(directory)\n\n    #if run_model_on_directory(directory):\n    #    log_message(\"Completed to FULL\", directory)\n    #else:\n    #    log_message(\"ERROR: Process ended before all files were processed\", directory)\n    return True\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/find_bird_util.py b/find_bird_util.py
--- a/find_bird_util.py	(revision 2255e38c2fbba87c7e08a306cdae61dbcf693d97)
+++ b/find_bird_util.py	(date 1703332362386)
@@ -8,7 +8,7 @@
 from PyQt6.QtWidgets import QApplication
 from torchvision.models.detection import fasterrcnn_resnet50_fpn
 from torchvision.models.detection.faster_rcnn import FasterRCNN_ResNet50_FPN_Weights
-import torch
+from torch import no_grad
 import numpy as np
 import cv2
 import shutil
@@ -17,10 +17,10 @@
 # 定义一个用于记录日志的函数
 def log_message(message, dir):
     log_file_path = os.path.join(dir, "process_log.txt")  # gets path to log file
-    log_file = open(log_file_path, "a")  # opens and allows writing
-    log_file.write(message + "\n")  # writes message to log
-    log_file.close()  # closes log file
-    print(message)  # prints message in console
+    with open(log_file_path, "a") as log_file:  # opens and allows writing
+        log_file.write(message + "\n")  # writes message to log
+    if message != ("="*50):
+        print(message)  # prints message in console
 
 
 def write_text_on_existing_image(image_path, text, font_size=30, font_color=(255, 255, 255), max_width=1024):
@@ -127,7 +127,7 @@
     return image
 
 
-def resize_folder(directory):
+def resize_folder(directory, callback=None):
     jpg_extensions = ['.jpg', '.jpeg']
 
     # creates a folder called "Resized" within the given directory to store all the resized images
@@ -135,14 +135,22 @@
 
     for filename in os.listdir(directory):
 
+<<<<<<< HEAD
         log_message("=" * 30, directory)
+=======
+        log_message("=" * 50, directory)
+>>>>>>> origin/master
         log_message(f"Begin resizing process on FILE: [{filename}]", directory)
         file_path = os.path.join(directory, filename)
         file_prefix, file_ext = os.path.splitext(filename)
 
         # checks if its a jpg file
         if file_ext.lower() in jpg_extensions:
+<<<<<<< HEAD
             log_message(f"NOTE: file extension matches, resizing image\n", directory)
+=======
+            log_message(f"NOTE: file extension matches, resizing image", directory)
+>>>>>>> origin/master
             # 打开并保存缩放后的 JPEG 图像
             with Image.open(file_path) as img:
                 resized_img = resize_image(img)
@@ -151,6 +159,9 @@
 
         QApplication.processEvents()
 
+    if callback is not None:
+        callback()
+
 
 def raw_to_jpeg(raw_file_path):
     filename = os.path.basename(raw_file_path)
@@ -177,7 +188,12 @@
             log_message(f"CONVERSION: RAW 文件转换为 JPEG: {raw_file_path} -> {jpg_file_path}", directory_path)
     except Exception as e:
         log_message(f"ERROR: 转换 RAW 文件时出错: {raw_file_path}, 错误: {e}", directory_path)
+<<<<<<< HEAD
 
+=======
+    finally:
+        pass
+>>>>>>> origin/master
 
 def calculate_sharpness(image):
     gray = cv2.cvtColor(np.array(image), cv2.COLOR_RGB2GRAY)
@@ -194,13 +210,23 @@
 
 
 # 检测图片中的鸟类并绘制边界框
-def detect_and_draw_birds(image_path, model, output_path, area_threshold=0.03, center_threshold=0.6):
+def detect_and_draw_birds(image_path, model, output_path, ui_settings, center_threshold=0.6):
+    area_threshold = ui_settings[1]
+    ai_confidence = ui_settings[0]
+    sharpness_threshold = ui_settings[2]
     bird_dominant = False
     bird_detected = False
     bird_sharp = False
     bird_centred = False
 
     if ".jpg" not in image_path.lower() and ".jpeg" not in image_path.lower():
+<<<<<<< HEAD
+=======
+        return None
+
+    if not os.path.exists(image_path):
+        print(f"ERROR: in detect_and_draw_birds, {image_path} not found")
+>>>>>>> origin/master
         return None
 
     # 确保打开的是图像文件
@@ -217,7 +243,7 @@
         center_distance_y = 0.0
 
         # 使用模型进行预测
-        with torch.no_grad():
+        with no_grad():
             prediction = model(image_tensor)
 
         # 绘制检测到的鸟类的边界框
@@ -226,7 +252,7 @@
             box, label, score = element
 
             # checks if a bird has been detected and draws a box around it if true
-            if score >= 0.8 and label == 16:  # 假设 16 是鸟类的标签， 0.7 confidence threshold
+            if score >= ai_confidence and label == 16:  # 假设 16 是鸟类的标签， 0.7 confidence threshold
                 draw.rectangle([(box[0], box[1]), (box[2], box[3])], outline="red", width=3)
                 bird_detected = True
 
@@ -249,7 +275,7 @@
                 # calculates sharpness
                 bird_region = img.crop((int(box[0]), int(box[1]), int(box[2]), int(box[3])))
                 sharpness = calculate_sharpness(bird_region)
-                if sharpness >= 800:
+                if sharpness >= sharpness_threshold:
                     bird_sharp = True
 
                 print(f"Sharpness = {sharpness}")
@@ -298,6 +324,7 @@
 def delete_directory(dir_path):
     # Check if the directory exists
     if os.path.exists(dir_path):
+<<<<<<< HEAD
 
         # Remove the directory and all its contents
         shutil.rmtree(dir_path)
@@ -354,12 +381,20 @@
         log_message(f"Process Completed, files processed: {len(os.listdir(resized_dir))}", dir_pth)
 
     return True"""
+=======
+>>>>>>> origin/master
 
+        # Remove the directory and all its contents
+        shutil.rmtree(dir_path)
+        print(f"CLEAN UP: The directory '{dir_path}' has been deleted.")
+    else:
+        print(f"ERROR in CLEAN UP: The directory '{dir_path}' does not exist.")
 
 def run_super_picky(directory):
     if not directory_contains_raw(directory):
         log_message(f"ERROR: {directory} does not contain any raw files", directory)
 
+    log_message(f"RAW FILES FOUND and CONVERTED: continuing onto resizing files", directory)
     resize_folder(directory)
 
     #if run_model_on_directory(directory):
Index: main_ui.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Form implementation generated from reading ui file 'Main.ui'\n#\n# Created by: PyQt6 UI code generator 6.4.2\n#\n# WARNING: Any manual changes made to this file will be lost when pyuic6 is\n# run again.  Do not edit this file unless you know what you are doing.\nimport sys\n\nfrom PyQt6 import QtCore, QtGui, QtWidgets\n\n\nclass Ui_Dialog(object):\n\n    def setupUi(self, Dialog):\n        Dialog.setObjectName(\"Dialog\")\n        Dialog.resize(640, 480)\n        self.confirm_button = QtWidgets.QDialogButtonBox(parent=Dialog)\n        self.confirm_button.setGeometry(QtCore.QRect(450, 440, 171, 32))\n        self.confirm_button.setOrientation(QtCore.Qt.Orientation.Horizontal)\n        self.confirm_button.setStandardButtons(QtWidgets.QDialogButtonBox.StandardButton.Cancel|QtWidgets.QDialogButtonBox.StandardButton.Ok)\n        self.confirm_button.setObjectName(\"confirm_button\")\n        self.label_select_steps = QtWidgets.QLabel(parent=Dialog)\n        self.label_select_steps.setGeometry(QtCore.QRect(20, 10, 251, 16))\n        self.label_select_steps.setObjectName(\"label_select_steps\")\n        self.progressBar = QtWidgets.QProgressBar(parent=Dialog)\n        self.progressBar.setGeometry(QtCore.QRect(30, 410, 581, 23))\n        self.progressBar.setProperty(\"value\", 24)\n        self.progressBar.setObjectName(\"progressBar\")\n        self.processing_txt_box = QtWidgets.QTextBrowser(parent=Dialog)\n        self.processing_txt_box.setGeometry(QtCore.QRect(20, 170, 591, 231))\n        self.processing_txt_box.setObjectName(\"processing_txt_box\")\n        self.label_AI_confidence = QtWidgets.QLabel(parent=Dialog)\n        self.label_AI_confidence.setGeometry(QtCore.QRect(20, 80, 131, 16))\n        self.label_AI_confidence.setObjectName(\"label_AI_confidence\")\n        self.radioButton_AI_normal = QtWidgets.QRadioButton(parent=Dialog)\n        self.radioButton_AI_normal.setGeometry(QtCore.QRect(160, 80, 99, 20))\n        self.radioButton_AI_normal.setObjectName(\"radioButton_AI_normal\")\n        self.radioButton_AI_high = QtWidgets.QRadioButton(parent=Dialog)\n        self.radioButton_AI_high.setGeometry(QtCore.QRect(230, 80, 51, 20))\n        self.radioButton_AI_high.setAcceptDrops(True)\n        self.radioButton_AI_high.setAutoFillBackground(True)\n        self.radioButton_AI_high.setChecked(False)\n        self.radioButton_AI_high.setObjectName(\"radioButton_AI_high\")\n        self.radioButton_bird_small = QtWidgets.QRadioButton(parent=Dialog)\n        self.radioButton_bird_small.setGeometry(QtCore.QRect(160, 110, 51, 20))\n        self.radioButton_bird_small.setObjectName(\"radioButton_bird_small\")\n        self.radioButton_bird_normal = QtWidgets.QRadioButton(parent=Dialog)\n        self.radioButton_bird_normal.setGeometry(QtCore.QRect(230, 110, 51, 20))\n        self.radioButton_bird_normal.setAcceptDrops(True)\n        self.radioButton_bird_normal.setAutoFillBackground(True)\n        self.radioButton_bird_normal.setChecked(False)\n        self.radioButton_bird_normal.setObjectName(\"radioButton_bird_normal\")\n        self.label_bird_ratio = QtWidgets.QLabel(parent=Dialog)\n        self.label_bird_ratio.setGeometry(QtCore.QRect(20, 110, 111, 16))\n        self.label_bird_ratio.setObjectName(\"label_bird_ratio\")\n        self.radioButton_bird_large = QtWidgets.QRadioButton(parent=Dialog)\n        self.radioButton_bird_large.setGeometry(QtCore.QRect(300, 110, 51, 20))\n        self.radioButton_bird_large.setAcceptDrops(True)\n        self.radioButton_bird_large.setAutoFillBackground(True)\n        self.radioButton_bird_large.setChecked(False)\n        self.radioButton_bird_large.setObjectName(\"radioButton_bird_large\")\n        self.label_bird_sharpness = QtWidgets.QLabel(parent=Dialog)\n        self.label_bird_sharpness.setGeometry(QtCore.QRect(20, 140, 111, 16))\n        self.label_bird_sharpness.setObjectName(\"label_bird_sharpness\")\n        self.radioButton_sharpness_clear = QtWidgets.QRadioButton(parent=Dialog)\n        self.radioButton_sharpness_clear.setGeometry(QtCore.QRect(230, 140, 51, 20))\n        self.radioButton_sharpness_clear.setAcceptDrops(True)\n        self.radioButton_sharpness_clear.setAutoFillBackground(True)\n        self.radioButton_sharpness_clear.setChecked(False)\n        self.radioButton_sharpness_clear.setObjectName(\"radioButton_sharpness_clear\")\n        self.radioButton_sharpness_normal = QtWidgets.QRadioButton(parent=Dialog)\n        self.radioButton_sharpness_normal.setGeometry(QtCore.QRect(160, 140, 51, 20))\n        self.radioButton_sharpness_normal.setObjectName(\"radioButton_sharpness_normal\")\n        self.radioButton_sharpness_extra_clear = QtWidgets.QRadioButton(parent=Dialog)\n        self.radioButton_sharpness_extra_clear.setGeometry(QtCore.QRect(300, 140, 51, 20))\n        self.radioButton_sharpness_extra_clear.setAcceptDrops(True)\n        self.radioButton_sharpness_extra_clear.setAutoFillBackground(True)\n        self.radioButton_sharpness_extra_clear.setChecked(True)\n        self.radioButton_sharpness_extra_clear.setObjectName(\"radioButton_sharpness_extra_clear\")\n        self.label_contact_email = QtWidgets.QLabel(parent=Dialog)\n        self.label_contact_email.setGeometry(QtCore.QRect(30, 440, 311, 16))\n        self.label_contact_email.setObjectName(\"label_contact_email\")\n        self.layoutWidget = QtWidgets.QWidget(parent=Dialog)\n        self.layoutWidget.setGeometry(QtCore.QRect(20, 40, 591, 33))\n        self.layoutWidget.setObjectName(\"layoutWidget\")\n        self.select_dir_layout = QtWidgets.QHBoxLayout(self.layoutWidget)\n        self.select_dir_layout.setContentsMargins(0, 0, 0, 0)\n        self.select_dir_layout.setObjectName(\"select_dir_layout\")\n        self.display_dir_box = QtWidgets.QLineEdit(parent=self.layoutWidget)\n        self.display_dir_box.setText(\"\")\n        self.display_dir_box.setObjectName(\"display_dir_box\")\n        self.select_dir_layout.addWidget(self.display_dir_box)\n        self.browse_dir_button = QtWidgets.QPushButton(parent=self.layoutWidget)\n        self.browse_dir_button.setObjectName(\"browse_dir_button\")\n        self.select_dir_layout.addWidget(self.browse_dir_button)\n\n        self.retranslateUi(Dialog)\n        self.confirm_button.accepted.connect(Dialog.accept) # type: ignore\n        self.confirm_button.rejected.connect(Dialog.reject) # type: ignore\n        QtCore.QMetaObject.connectSlotsByName(Dialog)\n        Dialog.setTabOrder(self.display_dir_box, self.processing_txt_box)\n\n        Dialog.closeEvent = self.customCloseEvent\n\n    def retranslateUi(self, Dialog):\n        _translate = QtCore.QCoreApplication.translate\n        Dialog.setWindowTitle(_translate(\"Dialog\", \"SuperPicky V0.01\"))\n        self.label_select_steps.setText(_translate(\"Dialog\", \"选择你的RAW 格式鸟图目录：\"))\n        self.processing_txt_box.setText(_translate(\"Dialog\", \"处理程序休息。。\\n请选择要处理的文档\"))\n        self.label_AI_confidence.setText(_translate(\"Dialog\", \"选择AI 处理置信度：\"))\n        self.radioButton_AI_normal.setText(_translate(\"Dialog\", \"正常\"))\n        self.radioButton_AI_high.setText(_translate(\"Dialog\", \"高\"))\n        self.radioButton_bird_small.setText(_translate(\"Dialog\", \"小\"))\n        self.radioButton_bird_normal.setText(_translate(\"Dialog\", \"正常\"))\n        self.label_bird_ratio.setText(_translate(\"Dialog\", \"选择鸟画面占比：\"))\n        self.radioButton_bird_large.setText(_translate(\"Dialog\", \"大\"))\n        self.label_bird_sharpness.setText(_translate(\"Dialog\", \"选择鸟清晰度：\"))\n        self.radioButton_sharpness_clear.setText(_translate(\"Dialog\", \"清晰\"))\n        self.radioButton_sharpness_normal.setText(_translate(\"Dialog\", \"常规\"))\n        self.radioButton_sharpness_extra_clear.setText(_translate(\"Dialog\", \"数毛\"))\n        self.label_contact_email.setText(_translate(\"Dialog\", \"技术支持：james@jamesphotography.com.au\"))\n        self.browse_dir_button.setText(_translate(\"Dialog\", \"选择目录\"))\n\n    def customCloseEvent(self, event):\n        # Force close the application\n        sys.stdout = sys.__stdout__\n        QtCore.QCoreApplication.instance().quit()\n\n        # super.closeEvent(event)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main_ui.py b/main_ui.py
--- a/main_ui.py	(revision 2255e38c2fbba87c7e08a306cdae61dbcf693d97)
+++ b/main_ui.py	(date 1703332362386)
@@ -7,6 +7,7 @@
 import sys
 
 from PyQt6 import QtCore, QtGui, QtWidgets
+from PyQt6.QtWidgets import QButtonGroup
 
 
 class Ui_Dialog(object):
@@ -35,6 +36,9 @@
         self.radioButton_AI_normal = QtWidgets.QRadioButton(parent=Dialog)
         self.radioButton_AI_normal.setGeometry(QtCore.QRect(160, 80, 99, 20))
         self.radioButton_AI_normal.setObjectName("radioButton_AI_normal")
+        self.radioButton_AI_normal.setAcceptDrops(True)
+        self.radioButton_AI_normal.setAutoFillBackground(True)
+        self.radioButton_AI_normal.setChecked(True)
         self.radioButton_AI_high = QtWidgets.QRadioButton(parent=Dialog)
         self.radioButton_AI_high.setGeometry(QtCore.QRect(230, 80, 51, 20))
         self.radioButton_AI_high.setAcceptDrops(True)
@@ -44,11 +48,13 @@
         self.radioButton_bird_small = QtWidgets.QRadioButton(parent=Dialog)
         self.radioButton_bird_small.setGeometry(QtCore.QRect(160, 110, 51, 20))
         self.radioButton_bird_small.setObjectName("radioButton_bird_small")
+        self.radioButton_bird_small.setAcceptDrops(True)
+        self.radioButton_bird_small.setAutoFillBackground(True)
+        self.radioButton_bird_small.setChecked(False)
         self.radioButton_bird_normal = QtWidgets.QRadioButton(parent=Dialog)
         self.radioButton_bird_normal.setGeometry(QtCore.QRect(230, 110, 51, 20))
         self.radioButton_bird_normal.setAcceptDrops(True)
         self.radioButton_bird_normal.setAutoFillBackground(True)
-        self.radioButton_bird_normal.setChecked(False)
         self.radioButton_bird_normal.setObjectName("radioButton_bird_normal")
         self.label_bird_ratio = QtWidgets.QLabel(parent=Dialog)
         self.label_bird_ratio.setGeometry(QtCore.QRect(20, 110, 111, 16))
@@ -75,7 +81,7 @@
         self.radioButton_sharpness_extra_clear.setGeometry(QtCore.QRect(300, 140, 51, 20))
         self.radioButton_sharpness_extra_clear.setAcceptDrops(True)
         self.radioButton_sharpness_extra_clear.setAutoFillBackground(True)
-        self.radioButton_sharpness_extra_clear.setChecked(True)
+        self.radioButton_sharpness_extra_clear.setChecked(False)
         self.radioButton_sharpness_extra_clear.setObjectName("radioButton_sharpness_extra_clear")
         self.label_contact_email = QtWidgets.QLabel(parent=Dialog)
         self.label_contact_email.setGeometry(QtCore.QRect(30, 440, 311, 16))
@@ -95,18 +101,50 @@
         self.select_dir_layout.addWidget(self.browse_dir_button)
 
         self.retranslateUi(Dialog)
-        self.confirm_button.accepted.connect(Dialog.accept) # type: ignore
-        self.confirm_button.rejected.connect(Dialog.reject) # type: ignore
         QtCore.QMetaObject.connectSlotsByName(Dialog)
         Dialog.setTabOrder(self.display_dir_box, self.processing_txt_box)
 
         Dialog.closeEvent = self.customCloseEvent
+        # Create button groups
+        self.groupAIConfidence = QButtonGroup(Dialog)
+        self.groupBirdRatio = QButtonGroup(Dialog)
+        self.groupBirdSharpness = QButtonGroup(Dialog)
+
+        # Add radio buttons to their respective groups
+        self.groupAIConfidence.addButton(self.radioButton_AI_normal)
+        self.groupAIConfidence.addButton(self.radioButton_AI_high)
+
+        self.groupBirdRatio.addButton(self.radioButton_bird_small)
+        self.groupBirdRatio.addButton(self.radioButton_bird_normal)
+        self.groupBirdRatio.addButton(self.radioButton_bird_large)
+
+        self.groupBirdSharpness.addButton(self.radioButton_sharpness_normal)
+        self.groupBirdSharpness.addButton(self.radioButton_sharpness_clear)
+        self.groupBirdSharpness.addButton(self.radioButton_sharpness_extra_clear)
+
+        """ JAMES 可编辑 （设置 default）"""
+        self.radioButton_AI_normal.setChecked(True)
+        self.radioButton_bird_normal.setChecked(True)
+        self.radioButton_sharpness_clear.setChecked(True)
+
 
     def retranslateUi(self, Dialog):
+        eagle_ascii = """
+                   __
+                 /  (
+                /    \\\\
+               /      \\\\
+              /  0  0  \\\\
+        ((\\__/  (_()()()()()
+        (      \\\\       /
+         \\\\ \\\\    )=====(  /
+          \\\\ \\\\  /        \\\\ 
+        """
+
         _translate = QtCore.QCoreApplication.translate
         Dialog.setWindowTitle(_translate("Dialog", "SuperPicky V0.01"))
         self.label_select_steps.setText(_translate("Dialog", "选择你的RAW 格式鸟图目录："))
-        self.processing_txt_box.setText(_translate("Dialog", "处理程序休息。。\n请选择要处理的文档"))
+        self.processing_txt_box.setText(_translate("Dialog", "SuperPicky 程序待命中......\n打鸟一时爽，选片帮你忙......\n"+eagle_ascii))
         self.label_AI_confidence.setText(_translate("Dialog", "选择AI 处理置信度："))
         self.radioButton_AI_normal.setText(_translate("Dialog", "正常"))
         self.radioButton_AI_high.setText(_translate("Dialog", "高"))
@@ -115,8 +153,8 @@
         self.label_bird_ratio.setText(_translate("Dialog", "选择鸟画面占比："))
         self.radioButton_bird_large.setText(_translate("Dialog", "大"))
         self.label_bird_sharpness.setText(_translate("Dialog", "选择鸟清晰度："))
-        self.radioButton_sharpness_clear.setText(_translate("Dialog", "清晰"))
-        self.radioButton_sharpness_normal.setText(_translate("Dialog", "常规"))
+        self.radioButton_sharpness_clear.setText(_translate("Dialog", "普通"))
+        self.radioButton_sharpness_normal.setText(_translate("Dialog", "清晰"))
         self.radioButton_sharpness_extra_clear.setText(_translate("Dialog", "数毛"))
         self.label_contact_email.setText(_translate("Dialog", "技术支持：james@jamesphotography.com.au"))
         self.browse_dir_button.setText(_translate("Dialog", "选择目录"))
@@ -126,4 +164,29 @@
         sys.stdout = sys.__stdout__
         QtCore.QCoreApplication.instance().quit()
 
-        # super.closeEvent(event)
\ No newline at end of file
+    """ JAMES 可编辑"""
+    def getCurrentSelections(self):
+        # For AI Confidence
+        global ai_confidence, bird_ratio, sharpness
+        if self.radioButton_AI_normal.isChecked():          # default
+            ai_confidence = 0.8
+        elif self.radioButton_AI_high.isChecked():
+            ai_confidence = 0.9
+
+        # For Bird Ratio
+        if self.radioButton_bird_small.isChecked():
+            bird_ratio = 0.03
+        elif self.radioButton_bird_normal.isChecked():      # default
+            bird_ratio = 0.05
+        elif self.radioButton_bird_large.isChecked():
+            bird_ratio = 0.08
+
+        # For Sharpness
+        if self.radioButton_sharpness_normal.isChecked():
+            sharpness = 800
+        elif self.radioButton_sharpness_clear.isChecked():  # default
+            sharpness = 1000
+        elif self.radioButton_sharpness_extra_clear.isChecked():
+            sharpness = 2000
+
+        return ai_confidence, bird_ratio, sharpness
\ No newline at end of file
Index: MainWindow.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import os\nimport time\nfrom PyQt6.QtWidgets import QDialog, QFileDialog\n\nfrom Worker import Worker\nfrom main_ui import Ui_Dialog  # Import from generated UI file\nfrom find_bird_util import log_message, run_super_picky, delete_directory\nimport sys\nfrom Stream import Stream\n\nclass MainWindow(QDialog, Ui_Dialog):\n    def __init__(self, parent=None):\n        super().__init__(parent)\n\n        self.stream = Stream(newText=self.onUpdateText)\n        sys.stdout = self.stream\n        self.setupUi(self)\n\n        self.directoryPath = \"\"\n\n        # Setup connections\n        self.browse_dir_button.clicked.connect(self.on_browse_button_clicked)\n        self.confirm_button.accepted.connect(self.accept)\n        self.confirm_button.rejected.connect(self.reject)\n\n        self.progressBar.setValue(0)\n        self.progressBar.setMaximum(100)\n        self.progressBar.setMinimum(0)\n\n    def onUpdateText(self, text):\n        self.processing_txt_box.append(text)\n\n    def on_browse_button_clicked(self):\n        # Open a dialog to select a directory\n        directory = QFileDialog.getExistingDirectory(self, \"Select Directory\")\n        if os.path.exists(directory):\n            self.directoryPath = directory\n            self.display_dir_box.setText(directory)\n            print(f\"Selected directory: {self.directoryPath}\")\n\n        return None\n\n    def accept(self):\n        if not os.path.exists(self.directoryPath):\n            return None\n\n        start = time.time()\n\n        # First, run the run_super_picky function and wait for it to complete\n        run_super_picky(self.directoryPath)\n\n        # Then, start the processing which includes Worker thread\n        self.startProcessing()\n\n        # If you want to wait for the Worker to finish in this method:\n        self.worker.finishedProcessing.connect(self.onWorkerFinished)\n\n        end = time.time()\n        log_message(f\"Processing time: {end - start}\", self.directoryPath)\n\n        return None\n\n    def reject(self):\n        self.directoryPath = \"\"\n        self.display_dir_box.setText(\"\")\n        # Code for cancelling the process\n        print(\"Process cancelled.\")\n        return None\n\n    def startProcessing(self):\n        dir_pth = self.directoryPath\n        self.worker = Worker(dir_pth)\n        self.worker.updateProgress.connect(self.updateProcessBar)\n        self.worker.start()\n\n    def updateProcessBar(self, value):\n        print(f\"========UPDATING PROGRESS BAR: {value}========\")\n        self.progressBar.setValue(value)\n\n    def onWorkerFinished(self):\n        # Code to execute after the Worker thread has finished\n        delete_directory(os.path.join(self.directoryPath, \"Resized\"))\n        end = time.time()\n        log_message(f\"Processing time: {end - self.start}\", self.directoryPath)\n\n\n## add comment
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/MainWindow.py b/MainWindow.py
--- a/MainWindow.py	(revision 2255e38c2fbba87c7e08a306cdae61dbcf693d97)
+++ b/MainWindow.py	(date 1703332362385)
@@ -1,6 +1,6 @@
 import os
 import time
-from PyQt6.QtWidgets import QDialog, QFileDialog
+from PyQt6.QtWidgets import QDialog, QFileDialog, QRadioButton, QButtonGroup
 
 from Worker import Worker
 from main_ui import Ui_Dialog  # Import from generated UI file
@@ -8,9 +8,11 @@
 import sys
 from Stream import Stream
 
+
 class MainWindow(QDialog, Ui_Dialog):
     def __init__(self, parent=None):
         super().__init__(parent)
+        self.processed_files = set()
 
         self.stream = Stream(newText=self.onUpdateText)
         sys.stdout = self.stream
@@ -41,12 +43,17 @@
         return None
 
     def accept(self):
+<<<<<<< HEAD
+=======
+        self.processed_files.clear()
+>>>>>>> origin/master
         if not os.path.exists(self.directoryPath):
             return None
 
         start = time.time()
 
         # First, run the run_super_picky function and wait for it to complete
+<<<<<<< HEAD
         run_super_picky(self.directoryPath)
 
         # Then, start the processing which includes Worker thread
@@ -54,6 +61,14 @@
 
         # If you want to wait for the Worker to finish in this method:
         self.worker.finishedProcessing.connect(self.onWorkerFinished)
+=======
+        if run_super_picky(self.directoryPath):
+            # Then, start the processing which includes Worker thread
+            self.startProcessing()
+
+            # If you want to wait for the Worker to finish in this method:
+            self.worker.finishedProcessing.connect(self.onWorkerFinished)
+>>>>>>> origin/master
 
         end = time.time()
         log_message(f"Processing time: {end - start}", self.directoryPath)
@@ -61,6 +76,7 @@
         return None
 
     def reject(self):
+        self.worker.quit()
         self.directoryPath = ""
         self.display_dir_box.setText("")
         # Code for cancelling the process
@@ -68,20 +84,29 @@
         return None
 
     def startProcessing(self):
-        dir_pth = self.directoryPath
-        self.worker = Worker(dir_pth)
+        self.ui_settings = self.getCurrentSelections()
+        self.worker = Worker(self.directoryPath, self.processed_files, self.ui_settings)
         self.worker.updateProgress.connect(self.updateProcessBar)
         self.worker.start()
 
     def updateProcessBar(self, value):
+<<<<<<< HEAD
         print(f"========UPDATING PROGRESS BAR: {value}========")
+=======
+>>>>>>> origin/master
         self.progressBar.setValue(value)
 
     def onWorkerFinished(self):
         # Code to execute after the Worker thread has finished
         delete_directory(os.path.join(self.directoryPath, "Resized"))
+<<<<<<< HEAD
         end = time.time()
         log_message(f"Processing time: {end - self.start}", self.directoryPath)
 
 
-## add comment
\ No newline at end of file
+## add comment
+=======
+        self.worker.quit()
+
+## add comment
+>>>>>>> origin/master
